/* eslint-disable @typescript-eslint/no-explicit-any */
import { useCallback, useRef } from "react";

const useFunction = <T extends (...args: any[]) => any>(fn?: T) => {
  const fnRef = useRef(fn);
  fnRef.current = fn;

  const callback = useCallback((...args: Parameters<T>) => {
    return fnRef.current?.(...args);
  }, []);

  return callback as T;
};
export { useFunction };
